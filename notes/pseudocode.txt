FILLING SOURCE

  CONSIDERATIONS


  DB

  Data.where(period: period, id: id).first.ebit
  => all attributes for a stock at that time

  SCHEMA

  company_id
  company_name
  date
  market_cap
  ev
  ebit
  net_ppe
  yearnings_yield
  roc
  ye_rating
  roc_score
  total_score



  1. how I'll access it
    
    data.periods.each do
      ...
        stocks = stocks.where(period: period)
        stocks.all do

        end
      ...
    end




class Period
  
  # no need for instance
  # only class method that will return array of strings representing periods
  # then it belongs with data

  period.



end
    

ENGINE


for each year in data set (or as specified):
  
  1. calculate rankings
    filter out stocks with closing price of 0
    filter out stocks with last pricing date earlier than current date
    filter out stocks outside of market cap size (floor and bottom)

    calculate ratios:
      for each stock do
        earnings yield = EBIT / EV
        ROC = EBIT (net PPE + NWC)
      end

    assign rankings:
      for each stock do
        reverse sort by earnings yield
        assign ratings: stock with highest earnings yield has EY rating = 1, etc.
      end

      for each stock do
        reverse sort by ROC
        assign ratings: stock with highest earnings yield has ROC rating = 1, etc.
      end

      for each stock do
        total rating = EY rating + ROC rating
      end

  2. build target portfolio based on rankings

    balance = market_value_of_porfolio
    allocation_per_stock = market_value_of_portfolio / 30

    for stocks with rating [1..30] do
      share count = round_down(allocation_per_stock / current price)
      add this stock (share count)
      balance -= stare_count * current_price
    end

    spend the rest on rating 1 and so on down:
      for each rating [1..30] do |rating|
        if balance > per_share_price
          share count = round_down(balance / current price)
          add this stock (share_count)
          balance -= stare_count * current_price
        end
      end

  3. rebalance porfolio

      # can't sell everything right away, will sell unneeded first

      find all stocks from existing portoflio which are not in target
      for each stock found
        sell it
      end

      # only stocks that are in target portfolio will remain at this point

      for each stock in existing portfolio do |current_stock|
        if current_stock.share_count > target share count
          sell excess
        elsif current_stock.share_count < target share count
          buy 
        end
        in target portfolio, mark "already in porfolio"
      end

      for each stock in target porfolio which are not "already in porfolio" do |stock|
        in portfolio, buy assigned number of shares of stock
      end
  end

  5. display returns
    for each period do
      stock-by-stock performance for each period
      portfolio-wide performance for each period
      SP500 performance
      Russell2000 performance
    end






THINGS TO KEEP IN MIND/ADD



trading part - keep track of holding period (for tax purposes)
viewing results -- add comparison to S&P500 and Russell 2000
logging out progress, steps and decisions; also running balance





CLASSES

current_portfolio
stock
ranking
target_portfolio



METHODS

class methods to move around and filter stocks

porfolio
  sell
  buy (should return success or failure if no cash)


MODULARITY

trading is separate from picking => can use trading module for different models








ARCHIVE



class Data  (previously planned implementation w/o db)
    Data.find_stocks(period: '12/31/2006') => array of stocks for this period
    Data.find_stocks(id: 'ID1234') => array of data points for this stock
    Data.find_stock(period: '12/31/2006', id: 'ID1234' ) => stock        # stock AT PARTICULAR PERIOD

    

    # no need to create instances of stock - it's just data => hash will do

    # no need to create an object for every stock for every period
    # Stock objects created out of CSV only on request
    # Stock.find will 
      # find attributes in the source CSV
      # call initialize with attribute params - to create an instance of Stock object
      # has to be efficient - if multiple objects, only read CSV once
end






